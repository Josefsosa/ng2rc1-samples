{"version":3,"file":"hero.service.js","sourceRoot":"","sources":["hero.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;;GAEG;AACH,qBAA+B,eAAe,CAAC,CAAA;AAC/C,qBAA+B,eAAe,CAAC,CAAA;AAC/C,qBAAwC,eAAe,CAAC,CAAA;AAGxD,2BAA+B,iBAAiB,CAAC,CAAA;AAGjD;IACE,qBAAqB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;QAEzB,cAAS,GAAG,YAAY,CAAC,CAAE,iBAAiB;IAFhB,CAAC;IAInC,+BAAS,GAAT;QACA,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;aACjC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;aACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC7B,CAAC;IAED,6BAAO,GAAP,UAAS,IAAY;QACnB,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,MAAA,IAAI,EAAE,CAAC,CAAC;QACtC,IAAI,OAAO,GAAG,IAAI,cAAO,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC,CAAC;QAClE,IAAI,OAAO,GAAG,IAAI,qBAAc,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;QAEvD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,OAAO,CAAC;aACjD,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;aACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC3B,CAAC;IAEO,iCAAW,GAAnB,UAAoB,GAAa;QAC/B,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,CAAC,CAAC;YAC1C,MAAM,IAAI,KAAK,CAAC,mBAAmB,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;QACpD,CAAC;QACD,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACtB,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,EAAG,CAAC;IAC1B,CAAC;IAEO,iCAAW,GAAnB,UAAqB,KAAU;QAC7B,oEAAoE;QACpE,IAAI,MAAM,GAAG,KAAK,CAAC,OAAO,IAAI,cAAc,CAAC;QAC7C,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,yBAAyB;QAChD,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAClC,CAAC;IAnCD;QAAC,iBAAU,EAAE;;mBAAA;IAoCb,kBAAC;AAAD,CAAC,AAnCD,IAmCC;AAnCY,mBAAW,cAmCvB,CAAA;AAED;;GAEG","sourcesContent":["/**\n * Created by josefsosa on 5/14/16.\n */\nimport { Injectable }     from '@angular/core';\nimport { Http, Response } from '@angular/http';\nimport { Headers, RequestOptions } from '@angular/http';\n\nimport { Hero }           from './hero';\nimport { Observable }     from 'rxjs/Observable';\n\n@Injectable()\nexport class HeroService {\n  constructor (private http: Http) {}\n\nprivate heroesUrl = 'app/heroes';  // URL to web API\n\n  getHeroes (): Observable<Hero[]> {\n  return this.http.get(this.heroesUrl)\n    .map(this.extractData)\n    .catch(this.handleError);\n}\n\naddHero (name: string): Observable<Hero> {\n  let body = JSON.stringify({ name });\nlet headers = new Headers({ 'Content-Type': 'application/json' });\nlet options = new RequestOptions({ headers: headers });\n\nreturn this.http.post(this.heroesUrl, body, options)\n  .map(this.extractData)\n  .catch(this.handleError);\n}\n\nprivate extractData(res: Response) {\n  if (res.status < 200 || res.status >= 300) {\n    throw new Error('Response status: ' + res.status);\n  }\n  let body = res.json();\n  return body.data || { };\n}\n\nprivate handleError (error: any) {\n  // In a real world app, we might use a remote logging infrastructure\n  let errMsg = error.message || 'Server error';\n  console.error(errMsg); // log to console instead\n  return Observable.throw(errMsg);\n}\n}\n\n/*\n private heroesUrl = 'app/heroes.json'; // URL to JSON file\n */\n"]}